"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'dev-insecure-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('1','true','yes','on')

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',#pip install drf-yasg
    'rest_framework',
    'corsheaders',
    'categorias',
    'recetas',
    "contacto",
    'seguridad'
]

# backend/settings.py

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # <-- MOVIDO HACIA ARRIBA
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# Primary: MySQL/MariaDB (requires server up). Fallback: SQLite when USE_SQLITE=1
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Railway/Production environment detection
IS_RAILWAY = 'RAILWAY_ENVIRONMENT' in os.environ
DATABASE_URL = os.getenv('DATABASE_URL')
USE_SQLITE = os.getenv('USE_SQLITE', '0').lower() in ('1','true','yes','on')

# Debug: Print environment variables
print(f"🔍 Debug - IS_RAILWAY: {IS_RAILWAY}")
print(f"🔍 Debug - DATABASE_URL present: {bool(DATABASE_URL)}")
print(f"🔍 Debug - MYSQL_HOST: {os.getenv('MYSQL_HOST', 'NOT SET')}")
print(f"🔍 Debug - MYSQL_USER: {os.getenv('MYSQL_USER', 'NOT SET')}")
print(f"🔍 Debug - MYSQL_PASSWORD present: {bool(os.getenv('MYSQL_PASSWORD'))}")
print(f"🔍 Debug - MYSQL_DATABASE: {os.getenv('MYSQL_DATABASE', 'NOT SET')}")

if IS_RAILWAY and DATABASE_URL:
    # Railway MySQL connection using DATABASE_URL
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
    print(f"🚂 Railway detected - Using DATABASE_URL")
elif IS_RAILWAY:
    # Railway with manual MySQL variables
    mysql_password = os.getenv('MYSQL_PASSWORD')
    if not mysql_password:
        print("❌ ERROR: MYSQL_PASSWORD not found in environment!")
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('MYSQL_DATABASE', 'railway'),
            'USER': os.getenv('MYSQL_USER', 'root'),
            'PASSWORD': mysql_password,
            'HOST': os.getenv('MYSQL_HOST', 'mysql.railway.internal'),
            'PORT': os.getenv('MYSQL_PORT', '3306'),
            'OPTIONS': {
                'autocommit': True,
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            }
        }
    }
    print(f"🚂 Railway detected - Using manual MySQL config")
    print(f"   - Host: {os.getenv('MYSQL_HOST')}")
    print(f"   - User: {os.getenv('MYSQL_USER')}")
    print(f"   - Database: {os.getenv('MYSQL_DATABASE')}")
elif USE_SQLITE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("📁 Using SQLite database")
else:
    # Local development MySQL configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('DATABASE_BD', 'railway'),
            'USER': os.getenv('DATABASE_USER', 'root'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'HOST': os.getenv('DATABASE_SERVER', 'localhost'),
            'PORT': os.getenv('DATABASE_PORT', '3306'),
            'OPTIONS': {
                'autocommit': True,
                'charset': 'utf8mb4',
            }
        }
    }
    print("🏠 Using local MySQL configuration")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/Santiago'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/assets/'
STATICFILES_DIRS =(
    os.path.join(BASE_DIR, 'assets'),
)
MEDIA_URL='/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# PRODUCTION CONFIGURATION
# =============================================================================

# Railway/Vercel/Production Environment Detection
IS_PRODUCTION = any([
    'RAILWAY_ENVIRONMENT' in os.environ,
    'VERCEL' in os.environ,
    'HEROKU' in os.environ,
    os.getenv('DJANGO_ENV') == 'production'
])

if IS_PRODUCTION:
    # Security settings for production
    DEBUG = False
    ALLOWED_HOSTS = ["*"]  # Railway/Vercel handle the domain validation
    
    # Static files configuration for production
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATIC_URL = '/static/'
    
    # WhiteNoise configuration for serving static files
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # CORS configuration for production
    CORS_ALLOWED_ORIGINS = [
        "https://recetario-frontend.vercel.app",
        "https://recetario-app.vercel.app",
        "https://recetario-vert.vercel.app",  # Tu frontend actual
        "https://tu-frontend.vercel.app",  # Cambiar por tu URL real
    ]
    
    CORS_ALLOW_CREDENTIALS = True
    
    # Security settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # Trust Railway/Vercel proxy headers
    USE_TZ = True
    
    # Railway specific settings
    if 'RAILWAY_ENVIRONMENT' in os.environ:
        print("🚂 Railway production environment detected")
        # Additional Railway-specific configurations can go here
    
    # Logging configuration for production
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            },
        },
    }# Updated CORS

# CORS updated for all Vercel domains
# CORS middleware fix
# Force CORS and PostgreSQL update
# Database config fix for Render PostgreSQL
# Back to MySQL configuration
# Railway configuration added
